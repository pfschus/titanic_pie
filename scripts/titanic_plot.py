# Custom functions for plotting data in our Titanic project
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import seaborn as sns
sns.set(style='ticks')
import os

def advanced_heatmap(x,y,z):
    """
    Heatmap where square sizes and colors reflect value.  
    """


    fig, ax = plt.subplots(figsize=(6,6))
    x_labels = [v for v in sorted(x.unique())]
    y_labels = [v for v in sorted(y.unique())]
    x_to_num = {p[1]:p[0] for p in enumerate(x_labels)} 
    y_to_num = {p[1]:p[0] for p in enumerate(y_labels)} 
    
    cmap = sns.diverging_palette(20,220,n=256,as_cmap=True)
    
    size_scale = 500
    sc = ax.scatter(x = x.map(x_to_num),
               y = y.map(y_to_num),
               s = z*size_scale,
               c = z,
               cmap=cmap,
               marker = 's')
    
    ax.set_xticks([x_to_num[v] for v in x_labels])
    ax.set_yticks([y_to_num[v] for v in y_labels])
    ax.set_xticklabels(x_labels, rotation=90, horizontalalignment='center')
    ax.set_yticklabels(y_labels)
    
    ax.grid(False,'major')
    ax.grid(True,'minor')
    ax.set_xticks([t+0.5 for t in ax.get_xticks()],minor=True)
    ax.set_yticks([t+0.5 for t in ax.get_xticks()],minor=True)
    
    cbar = plt.colorbar(sc,ax=ax,fraction=0.043,pad=0.1)
   
    ax.set_aspect('equal')
    plt.tight_layout()    
        
    return [x_labels, y_labels, x_to_num, y_to_num]
    
    
    
def step_plot(edges,y, linewidth=.5, color='k', zorder = 1, endflag = 1):
    """
    Plot a step plot. Meant for use with histogram data generated by:
        counts, bin_edges = np.histogram(x_samples,bin_edges)
        bicorr.step_plot(bin_edges,counts)
    Borrowed from Patricia's bicorr project
    
    Parameters
    ----------
    edges : ndarray
        Bin edges
    y : ndarray
        Bin counts
    linewidth : float, optional
        Width of step lines
    color : float, optional
        Color of lines
    zorder : int, optional
        Order of layer. Lower integer = farther back
    endflag : bool, optional   
        Bring line back to zero at ends. For histogram. 

    Returns
    -------
    n/a
    """
    # Horizontal lines
    for i in range(len(y)):
        plt.hlines(y[i],edges[i],edges[i+1],linewidth=linewidth,color=color,zorder=zorder)
    # Vertical lines
    for i in range(len(y)-1):
        plt.vlines(edges[0],0,y[0],linewidth=linewidth,color=color,zorder=zorder)
        plt.vlines(edges[i+1],y[i],y[i+1],linewidth=linewidth,color=color,zorder=zorder)
        plt.vlines(edges[-1],0,y[-1],linewidth=linewidth,color=color,zorder=zorder)